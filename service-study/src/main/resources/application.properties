server.port=9002
spring.application.name=service-study

# 服务注册配置
# 是否注册
#eureka.client.register-with-eureka=false
# 注册地址
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
# 使用IP注册
eureka.instance.prefer-ip-address=true
#自定义上报到注册中心的instance-id(eureka界面显示的内容格式)
eureka.instance.instance-id=${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}

feign.hystrix.enabled=true
hystrix.command.default.execution.timeout.enabled=true
#断路器的超时时间,下级服务返回超出熔断器时间，即便成功，消费端消息也是TIMEOUT,所以一般断路器的超时时间需要大于ribbon的超时时间。
#服务的返回时间大于ribbon的超时时间，会触发重试
##默认=1000，太小
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=5000

#断路器详细设置
#当在配置时间窗口内达到此数量的失败后，进行短路。默认20个）
hystrix.command.default.circuitBreaker.requestVolumeThreshold=20
#短路多久以后开始尝试是否恢复，默认5s）
hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=5
#出错百分比阈值，当达到此阈值后，开始短路。默认50%）
#hystrix.command.default.circuitBreaker.errorThresholdPercentage=50%

#druidstat config
druid.stat-view-servlet.enabled=true
druid.stat-view-servlet.url-pattern=/druid/*
druid.stat-view-servlet.reset-enable=false
druid.stat-view-servlet.login-username=muyi
druid.stat-view-servlet.login-password=muyi123
druid.stat-view-servlet.allow=127.0.0.1
druid.stat-view-servlet.deny=false
druid.filter.stat.db-type=mysql
druid.filter.stat.log-slow-sql=true
druid.filter.stat.slow-sql-millis=2000
druid.stat.mergeSql=true
dataSource.logger.name=sql
connection.logger.name=sql
statement.logger.name=sql
resultSet.logger.name=sql
druid.log.stmt.executableSql=true
druid.wall.logViolation=true
druid.wall.throwException=true
druid.wall.multiStatementAllow=true

#druidWebStat config
druid.web-stat-filter.url-pattern=/*
druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*
druid.web-stat-filter.session-stat-enable=true
druid.web-stat-filter.session-stat-max-count=1000
druid.web-stat-filter.principal-session-name=s_device
druid.web-stat-filter.principal-cookie-name=c_device
druid.web-stat-filter.profile-enable=true
druid.web-stat-filter.enabled=true

#datasource
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.filters=stat
spring.datasource.maxActive=20
spring.datasource.initialSize=1
spring.datasource.maxWait=60000
spring.datasource.minIdle=1
spring.datasource.timeBetweenEvictionRunsMillis=60000
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=select 'x'
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
spring.datasource.poolPreparedStatements=false
spring.datasource.maxOpenPreparedStatements=20
spring.datasource.timeBetweenLogStatsMillis=300000
spring.datasource.url.muyi = jdbc:mysql://127.0.0.1:3306/muyi?characterEncoding=utf-8&useUnicode=true&allowMultiQueries=true&autoReconnect=true&useSSL=false
spring.datasource.username.muyi = root
spring.datasource.password.muyi = muyi123
spring.datasource.url.dc = jdbc:mysql://127.0.0.1:3306/dc?characterEncoding=utf-8&useUnicode=true&allowMultiQueries=true&autoReconnect=true&useSSL=false
spring.datasource.username.dc = root
spring.datasource.password.dc = muyi123

redis.host=127.0.0.1
redis.port=6379
redis.password=""
#redis数据库序号
redis.database=0
#当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能
redis.timeout=2000
#控制一个pool最多有多少个状态为idle(空闲的)的jedis实例，默认值也是8
redis.pool.max-idle=10
#控制一个pool最少有多少个状态为idle(空闲的)的jedis
redis.pool.min-idle=10
#可用连接实例的最大数目，默认值为8；如果赋值为-1，则表示不限制
redis.pool.max-active=10
#等待可用连接的最大时间，单位ms，默认-1，表示永不超时。如果超过等待时间，则直接抛出异常
redis.pool.max-wait=-1
redis.testOnBorrow=true